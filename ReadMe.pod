=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=head1 NAME

DJSON - Decommisioned. Use JSONY.pm instead.

=for html
<a href="https://travis-ci.org/ingydotnet/djson-pm"><img src="https://travis-ci.org/ingydotnet/djson-pm.png" alt="djson-pm"></a>
<a href="https://coveralls.io/r/ingydotnet/djson-pm?branch=master"><img src="https://coveralls.io/repos/ingydotnet/djson-pm/badge.png" alt="djson-pm"></a>

=head1 SYNOPSIS

    use DJSON;

    my $data = decode_djson $djson_string;

=head1 DESCRIPTION

DJSON is a data language that is simlar to JSON, just more chill. All valid
JSON is also valid DJSON (and represents the same thing when decoded), but
DJSON lets you omit a lot of the syntax that makes JSON a pain to write.

=head1 DJSON SYNTAX

Here is some examples of DJSON followed by equivalent JSON:

Words don't need quotes. A list of things is an array:

    foo bar baz

    [ "foo", "bar", "baz" ]

Strings with spaces can use single or double quotes:

    'foo bar'      # <= This is (a comment indicating) a string
    # More commenting
    "baz  boom "

    [ "foo bar ", "baz  boom " ]

Hashes still need curly braces:

    {
        foo { bar baz }
        num -1.2e3
    }

    { "foo": { "bar": "baz" }, "num": -1.2e3 }

More soon...

NOTE: You may want to look at the tests (especially C<t/decode.t>) to see the
      full abilities of DJSON.

=head1 STATUS

B<BEWARE!!!>

DJSON is mst's idea, and ingy's Pegex based implementation. The language is
just a baby, and will change a lot, or may go away entirely.

Development people are currently working on this in C<#pegex> in
irc.freenode.net. Please drop by.

=head1 AUTHORS

=over

=item * Ingy döt Net (ingy) <ingy@cpan.org>

=item * Matt S. Trout (mst) <mst@shadowcat.co.uk>

=back

=head1 COPYRIGHT AND LICENSE

Copyright 2011-2014 Ingy döt Net

This library is free software and may be distributed under the same terms as
perl itself.

=cut
